<form>
    <br>
    <h2 id="taskNumber">(current)</h2>
    <div class="form-group" >
      <label>Titre</label>
      <input type="text" id="taskTitle" class="form-control">
    </div>
    <div class="form-group">
      <label>Date de début</label>
      <input type="date" class="form-control" id="taskBeginDate">
    </div>
    <div class="form-group">
        <label>Date de fin</label>
        <input type="date" class="form-control" id="taskEndDate">
      </div>
      <div class="form-group">
        <label>Statut</label>
        <select class="form-control" id="taskStatus">
            <option id="notPrecised">NON PRECISE</option>
            <option id="taskRequired">UNE TACHE EST REQUISE</option>
            <option id="doing">EN COURS</option>
            <option id="done">ACHEVEE</option>
            <option id="cancelled">ANNULEE</option>
          </select>
      </div>
      <div class="form-group">
        <label>Catégories</label>
        <select class="custom-select" multiple id="taskTags">
        </select>
    </div>
    
    <button type="submit" id="editTask" class="btn btn-primary">Modifier</button>
    <hr>
    <p id="message"></p>
  </form>

  <script>

    $(document).ready(function() {

        let api = "http://localhost:8090/api/"
        let id = $(location).attr('pathname').split('/')[2];
        let form = {
            title: $('#taskTitle'),
            beginDate: $('#taskBeginDate'),
            endDate: $('#taskEndDate'),
            status: $('#taskStatus'),
            tags: $('#taskTags')
        };

        $("#taskNumber").text("Modification de la tâche " + id);


        $.getJSON(api + 'task/' + id, function(results) {
            let task = results[0];
            let tags = task.tags;

            $.get(api + 'tags', (tags) => {
                $.each(tags, (index, value)=>{
                    $('#taskTags').append('<option>'+value.name+'</option>')
                })
            });

            form.title.val(task.title);
            form.beginDate.val(task.beginDate);
            form.endDate.val(task.endDate);
            console.log(task.status)
            form.status.children(getTaskStatusOptionId(task.status)).attr('selected', true);

            $.each(form.tags.children(), function (index, value) {
                if(task.tags.includes($(value).text())) {
                    $(value).attr('selected', true);
                }
            });

            
            
        })

        $("#editTask").click(function (e) {
            e.preventDefault();
            let selectedTags = [];
            $("#message").fadeIn(1000);

            $.each($('#taskTags').children(), function(index, value) {
                if($(value).prop('selected')) {
                    selectedTags.push($(value).text())  
                }
            });

            let taskEdited = {
                title: $('#taskTitle').val(),
                beginDate: $('#taskBeginDate').val(),
                endDate: $('#taskEndDate').val(),
                status: $('#taskStatus').children("option:selected").text(),
                tags: selectedTags
            }

            $.ajax({
              url: api + 'task/' + id,
              type: 'PUT',
              data: taskEdited,
              success: (result) => {
                $("#message").addClass('text-success');
                $("#message").text("La tâche a été modifiée.");
                $("#message").fadeOut(2500);
              },
              error: () => {
                alert("Erreur : La tâche n'a pas pu être modifiée");
              }
            });
        });

    });

    function getTaskStatusOptionId(taskStatus) {

        switch(taskStatus) {
            case "EN COURS" : {
                return "#doing";
                break;
            }
            case "NON PRECISE" : {
                return "#notPrecised";
                break;
            }
            case "UNE TACHE EST REQUISE" : {
                return "#taskRequired";
                break;
            }
            case "ACHEVEE" : {
                return "#done";
                break;
            }
            case "ANNULEE": {
                return "#cancelled";
                break;
            }
        }

    }



  </script>